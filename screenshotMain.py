# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'learn/screenshotMain.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import cv2
import face_recognition
import numpy as np
import os

from PyQt5 import QtCore, QtGui, QtWidgets
screen=0
nom=""
prenom=""

class Ui_screenshot(object):
    def setupUi(self, screenshot):
        screenshot.setObjectName("screenshot")
        screenshot.resize(1260, 583)
        screenshot.setStyleSheet("background-color:#CDBEFF;")
        self.imgLabel_screen2 = QtWidgets.QLabel(parent=screenshot)
        self.imgLabel_screen2.setGeometry(QtCore.QRect(80, 50, 621, 451))
        self.imgLabel_screen2.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.imgLabel_screen2.setStyleSheet("border: 2px solid rgba(0, 0, 0, 255);\n"
"\n"
"\n"
"")
        self.imgLabel_screen2.setText("")
        self.imgLabel_screen2.setObjectName("imgLabel_screen2")
        self.label_2 = QtWidgets.QLabel(parent=screenshot)
        self.label_2.setGeometry(QtCore.QRect(370, 40, 41, 41))
        self.label_2.setStyleSheet("\n"
"font-size:30px;\n"
"")
        self.label_2.setObjectName("label_2")
        self.pushButton_screen = QtWidgets.QPushButton(parent=screenshot)
        self.pushButton_screen.setGeometry(QtCore.QRect(320, 520, 161, 41))
        self.pushButton_screen.setStyleSheet("font-size:30px;\n"
"background-color:#332562;\n"
"color:#FFFFFF;\n"
"border-radius:7px;\n"
"")
        self.pushButton_screen.setObjectName("pushButton_screen")
        self.label = QtWidgets.QLabel(parent=screenshot)
        self.label.setGeometry(QtCore.QRect(750, 130, 461, 241))
        self.label.setStyleSheet("font-size:30px;\n"
"background-color:#332562;\n"
"color:#FFFFFF;\n"
"border-radius:7px;")
        self.label.setText("")
        self.label.setObjectName("label")
        self.lineEdit_nom = QtWidgets.QLineEdit(parent=screenshot)
        self.lineEdit_nom.setGeometry(QtCore.QRect(790, 210, 381, 31))
        self.lineEdit_nom.setStyleSheet("border-radius:7px")
        self.lineEdit_nom.setObjectName("lineEdit_nom")
        self.lineEdit_prenom = QtWidgets.QLineEdit(parent=screenshot)
        self.lineEdit_prenom.setGeometry(QtCore.QRect(790, 320, 381, 31))
        self.lineEdit_prenom.setStyleSheet("border-radius:7px")
        self.lineEdit_prenom.setObjectName("lineEdit_prenom")
        self.label_3 = QtWidgets.QLabel(parent=screenshot)
        self.label_3.setGeometry(QtCore.QRect(770, 160, 71, 31))
        self.label_3.setStyleSheet("\n"
"background-color:#332562;\n"
"color:#FFFFFF;\n"
"")
        self.label_3.setLineWidth(0)
        self.label_3.setTextFormat(QtCore.Qt.TextFormat.AutoText)
        self.label_3.setWordWrap(False)
        self.label_3.setIndent(-1)
        self.label_3.setObjectName("label_3")
        self.label_5 = QtWidgets.QLabel(parent=screenshot)
        self.label_5.setGeometry(QtCore.QRect(770, 260, 71, 41))
        self.label_5.setStyleSheet("background-color:#332562;\n"
"color:#FFFFFF;")
        self.label_5.setObjectName("label_5")

        self.retranslateUi(screenshot)
        QtCore.QMetaObject.connectSlotsByName(screenshot)

    def retranslateUi(self, screenshot):
        _translate = QtCore.QCoreApplication.translate
        screenshot.setWindowTitle(_translate("screenshot", "Dialog"))
        self.label_2.setText(_translate("screenshot", ""))
        self.pushButton_screen.setText(_translate("screenshot", ""))
        self.label_3.setText(_translate("screenshot", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600; font-style:italic;\">nom :</span></p></body></html>"))
        self.label_5.setText(_translate("screenshot", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">prenom :</span></p></body></html>"))

        self.Worker1 = Worker1()
        self.Worker1.start()
        self.Worker1.ImageUpdate.connect(self.ImageUpdateSlot)
        self.pushButton_screen.clicked.connect(self.screenImage)
    
    def ImageUpdateSlot(self, Image):
        self.imgLabel_screen2.setPixmap(QPixmap.fromImage(Image))
    def screenImage(self):
        global screen
        global nom
        global prenom 
        nom=self.lineEdit_nom.text()
        prenom=self.lineEdit_prenom.text()
        print(nom,prenom)
        screen=1
        msg = QMessageBox()
        msg.setWindowTitle("Emsi_Smart ")
        msg.setText("Votre image a bien été capturée :)")
        msg.setIcon(QMessageBox.Warning)
        #msg.setStandardButtons (QMessageBox.OK )
        x = msg.exec_()
        
        
class Worker1(QThread):   
     
    ImageUpdate = pyqtSignal(QImage) 
    def run(self):      
        self.ThreadActive = True
        global screen
        self.Capture = cv2.VideoCapture(0)   
        while self.ThreadActive:
            ret, self.frame = self.Capture.read()
            if ret:
                # Convert the image from BGR color (which OpenCV uses) to RGB color (which face_recognition uses)
                Image = cv2.cvtColor(self.frame, cv2.COLOR_BGR2RGB)
                
                # Find all the faces and face enqcodings in the frame of video
                face_locations = face_recognition.face_locations(Image)
                if(screen==1):
                        #nom=self.lineEdit.text()
                        #prenom=
                        #print(self.nom,self.prenom)
                        img_name ="data/{}_{}.png".format(nom.upper(),prenom.upper())
                        cv2.imwrite(img_name,self.frame)
                        screen=2
                        self.Capture.release()
        
                for (top, right, bottom, left) in face_locations :
                    name = "Unknown"
                    cv2.rectangle(self.frame, (left-10, top+20), (right+10, bottom-15), (0, 255, 0),)
                
                Image = cv2.cvtColor(self.frame, cv2.COLOR_BGR2RGB)
                FlippedImage = cv2.flip(Image, 1)
                ConvertToQtFormat = QImage(FlippedImage.data, FlippedImage.shape[1], FlippedImage.shape[0], QImage.Format_RGB888)
                Pic = ConvertToQtFormat.scaled(640, 480, Qt.KeepAspectRatio)
                self.ImageUpdate.emit(Pic)
   
    def stop(self):
        self.ThreadActive = False
        self.wait()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_screenshot()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
